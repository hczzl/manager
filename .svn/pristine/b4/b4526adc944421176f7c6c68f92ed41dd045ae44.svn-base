package com.ruoyi.web.controller.system;


import com.alibaba.fastjson.JSON;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.constant.UserConstants;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.core.text.Convert;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.common.exception.BusinessException;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.common.utils.MyUtils;
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.framework.shiro.service.SysPasswordService;
import com.ruoyi.framework.util.ShiroUtils;
import com.ruoyi.system.domain.SysUser;
import com.ruoyi.system.domain.SysUserRole;
import com.ruoyi.system.domain.vo.SysUserStatisticsByMonthVo;
import com.ruoyi.system.domain.SysUserWorks;
import com.ruoyi.system.domain.vo.SysUserStatisticsByYear;
import com.ruoyi.system.service.*;
import com.ruoyi.web.domain.*;
import com.ruoyi.web.service.SysFileInfoService;
import com.ruoyi.web.service.SysHolidaysService;
import com.ruoyi.web.service.audit.AuditFlowCurrentService;
import com.ruoyi.web.service.audit.AuditFlowNodeRoleService;
import com.ruoyi.web.service.item.TaskEcharService;
import com.ruoyi.web.service.item.TaskUserService;
import com.ruoyi.web.service.item.TaskTableService;
import com.ruoyi.web.util.CalculateHours;
import io.swagger.annotations.ApiOperation;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;


/**
 * 用户信息
 *
 * @author ruoyi
 */
@Controller
@RequestMapping("/system/user")
public class SysUserController extends BaseController {

    private String prefix = "system/user";

    @Autowired
    private ISysUserService userService;
    @Autowired
    private ISysRoleService roleService;
    @Autowired
    private ISysPostService postService;
    @Autowired
    private SysPasswordService passwordService;
    @Autowired
    private AuditFlowNodeRoleService auditFlowNodeRoleService;
    @Autowired
    private SysFileInfoService sysFileInfoService;
    @Autowired
    private TaskTableService taskTableService;
    @Autowired
    private AuditFlowCurrentService auditFlowCurrentService;
    @Autowired
    private TaskUserService taskUserService;
    @Autowired
    private SysHolidaysService holidaysService;
    @Autowired
    private ISysRoleService sysRoleService;
    @Autowired
    private ISysUserTokenService userTokenService;
    @Autowired
    private ISysUserWorksService sysUserWorksService;
    @Autowired
    private TaskEcharService taskEcharService;

    @RequiresPermissions("system:user:view")
    @GetMapping()
    public String user() {
        return prefix + "/user";
    }

    @RequestMapping(value = "/list", method = {RequestMethod.POST})
    @ResponseBody
    public List<SysUser> list(SysUser user) {
        if (user.getSearchFlowId() != null && !"".equals(user.getSearchFlowId())) {
            AuditFlowNodeRole auditFlowNodeRole = new AuditFlowNodeRole();
            auditFlowNodeRole.setSearchFlowId(user.getSearchFlowId());
            List<AuditFlowNodeRole> auditFlowNodeRoleList = auditFlowNodeRoleService.selectFlowNodeRoleList(auditFlowNodeRole);//得到具有审批权限的用户角色
            String roleId = "";
            for (AuditFlowNodeRole auditFlowNodeRole1 : auditFlowNodeRoleList) {
                roleId += auditFlowNodeRole1.getRoleId() + ",";
            }
            if (roleId.length() > 0) {
                roleId = roleId.substring(0, roleId.length() - 1);
            }
            user.setSearchFlowId(roleId);
        }
        Boolean superAdmin = userService.superAdmin(ShiroUtils.getUserId());
        if (!superAdmin) {
            //超级管理员有权限查看所有人员，包含禁用人员
            user.setNotStatus("1");
        }
        List<SysUser> resultList = userService.selectUserList(user);

        return resultList;
    }

    @ApiOperation("任务统计界面调用的接口")
    @RequestMapping(value = "/statistics", method = {RequestMethod.POST})
    @ResponseBody
    public List<SysUser> statisticsList(SysUser user) {
        if (user.getSearchFlowId() != null && !"".equals(user.getSearchFlowId())) {
            AuditFlowNodeRole auditFlowNodeRole = new AuditFlowNodeRole();
            auditFlowNodeRole.setSearchFlowId(user.getSearchFlowId());
            List<AuditFlowNodeRole> auditFlowNodeRoleList = auditFlowNodeRoleService.selectFlowNodeRoleList(auditFlowNodeRole);//得到具有审批权限的用户角色
            String roleId = "";
            for (AuditFlowNodeRole auditFlowNodeRole1 : auditFlowNodeRoleList) {
                roleId += auditFlowNodeRole1.getRoleId() + ",";
            }
            if (roleId.length() > 0) {
                roleId = roleId.substring(0, roleId.length() - 1);
            }
            user.setSearchFlowId(roleId);
        }
        List<SysUser> userList = userService.selectUserList(user);
        if (!ShiroUtils.isEmpty(userList)) {
            for (int i = 0; i < userList.size(); i++) {
                Integer userId = userList.get(i).getUserId().intValue();
                SysUserWorks sysUserWorks = new SysUserWorks();
                sysUserWorks.setUserId(userId);
                sysUserWorks.setMonth(user.getMonth());
                sysUserWorks.setYear(user.getYear());
                List<SysUserWorks> userWorksList = sysUserWorksService.selectUserWorks(sysUserWorks);
                for (int j = 0; j < userWorksList.size(); j++) {
                    if (user.getMonth() != null && user.getMonth() != 13) {
                        Integer workDays = userWorksList.get(j).getWorkDays();
                        String period = userWorksList.get(j).getPeriod();
                        Integer creatTaskNum = userWorksList.get(j).getCreateTaskNum();
                        if (workDays != null || period != null || creatTaskNum != null) {
                            double saturation = 0;
                            if (period != null) {
                                double avg = Float.parseFloat(period) / (float) workDays;
                                String str = String.format("%.4f", avg);
                                saturation = Double.valueOf(str.toString());
                            }
                            userList.get(i).setWorkDays(workDays);
                            userList.get(i).setPeriod(period);
                            userList.get(i).setCreatTaskNum(creatTaskNum);
                            userList.get(i).setSaturation(saturation);
                            userList.get(i).setMonth(userWorksList.get(j).getMonth());
                            userList.get(i).setYear(userWorksList.get(j).getYear());
                            userList.get(i).setTaskAverageScore(userWorksList.get(j).getTaskAverageScore());
                            userList.get(i).setMultipleMonthScore(userWorksList.get(j).getMultipleMonthScore());
                            userList.get(i).setMonthScore(userWorksList.get(j).getMonthScore());
                        }
                    }
                    if (user.getMonth() != null && user.getMonth() == 13) {
                        double yearScore = userWorksList.get(j).getYearScore();
                        double personalScore = userWorksList.get(j).getPersonalScore();
                        String sum = String.format("%.4f", yearScore * 0.7 + personalScore * 0.3);
                        double average = Double.valueOf(sum.toString());
                        userList.get(i).setYear(user.getYear());
                        userList.get(i).setYearAverageScore(average);
                        userList.get(i).setTaskAlreadyFinish(userWorksList.get(j).getTaskAlreadyFinish());
                        userList.get(i).setTaskNotFinish(userWorksList.get(j).getTaskNotFinish());
                        userList.get(i).setTaskOverdue(userWorksList.get(j).getTaskOverdue());
                        userList.get(i).setTaskNotOverdue(userWorksList.get(j).getTaskNotOverdue());
                    }
                }
            }
        }
        return userList;
    }


    @Log(title = "统计导出", businessType = BusinessType.EXPORT)
    @PostMapping("/statisticsExport")
    @ResponseBody
    public AjaxResult statisticsExport(SysUser user) {
        NumberFormat format = NumberFormat.getPercentInstance();
        format.setMinimumFractionDigits(2);
        if (user.getMonth() != 13) {
            List<SysUserStatisticsByMonthVo> list = JSON.parseArray(JSON.toJSONString(statisticsList(user)), SysUserStatisticsByMonthVo.class);
            for (SysUserStatisticsByMonthVo vo : list) {
                String saturation = vo.getSaturation();
                saturation = format.format(Double.parseDouble(saturation));
                vo.setSaturation(saturation);
            }
            ExcelUtil<SysUserStatisticsByMonthVo> util = new ExcelUtil<SysUserStatisticsByMonthVo>(SysUserStatisticsByMonthVo.class);
            return util.exportExcel(list, "统计数据");
        } else {
            List<SysUserStatisticsByYear> list = JSON.parseArray(JSON.toJSONString(statisticsList(user)), SysUserStatisticsByYear.class);
            ExcelUtil<SysUserStatisticsByYear> util = new ExcelUtil<SysUserStatisticsByYear>(SysUserStatisticsByYear.class);
            return util.exportExcel(list, "统计数据");
        }
    }

    @Log(title = "个人统计导出", businessType = BusinessType.EXPORT)
    @PostMapping("/statisticsExportByUser")
    @ResponseBody
    public AjaxResult statisticsExportByUser(TaskEcharQueryInfo queryInfo, HttpServletResponse response) {
        String filename = "";
        try {
            //生成导出模板
            Workbook wb = new XSSFWorkbook();
            CellStyle style = wb.createCellStyle();
            style.setAlignment(HorizontalAlignment.CENTER);// 左右居中
            style.setVerticalAlignment(VerticalAlignment.CENTER);// 上下居中
            AtomicReference<Integer> rowNum = new AtomicReference<>(1);
            //建立新的sheet对象（excel的表单）
            Sheet taskSheet = wb.createSheet("任务统计");
            //设置单元格宽度
            taskSheet.setDefaultColumnWidth(30);
            Row taskOnerow = taskSheet.createRow(0);
            //创建单元格并设置单元格内容
            List<String> cellTitles = Arrays.asList("任务名称", "任务进度", "所属项目", "任务状态", "任务评分");
            for (int i = 0; i < cellTitles.size(); i++) {
                taskOnerow.createCell(i).setCellValue(cellTitles.get(i));
                taskOnerow.getCell(i).setCellStyle(style);
            }
            TaskTable taskTable = new TaskTable();
            taskTable.setPeopleString(queryInfo.getUserId().toString());
            taskTable.setStartTimes(queryInfo.getStartTimes());
            taskTable.setEndTimes(queryInfo.getEndTimes());
            taskTable.setPageNumber(1);
            taskTable.setTotal(Integer.MAX_VALUE);
            List<TaskTable> taskList = taskTableService.lists(taskTable).getList();
            taskList.forEach(item -> {
                Row row2 = taskSheet.createRow(rowNum.get());
                row2.createCell(0).setCellValue(item.getTaskTitle());
                row2.createCell(1).setCellValue(item.getScheduleRate() + "%");
                row2.createCell(2).setCellValue(item.getProjectName());
                row2.createCell(3).setCellValue(MyUtils.getTaskFinishFlagName(item.getTaskFinishflag()));
                if (item.getTaskScore() != null) {
                    row2.createCell(4).setCellValue(item.getTaskScore());
                    row2.getCell(4).setCellStyle(style);
                }
                row2.getCell(0).setCellStyle(style);
                row2.getCell(1).setCellStyle(style);
                row2.getCell(2).setCellStyle(style);
                row2.getCell(3).setCellStyle(style);
                rowNum.set(rowNum.get() + 1);
            });


            AtomicReference<Integer> taskEcharRowNum = new AtomicReference<>(1);
            List<TaskEchar> data = (List<TaskEchar>) taskEcharService.getTaskEchartsData(queryInfo).get("data");
            if (data != null && data.size() > 0) {
                TaskEchar taskEchar = data.get(0);
                Sheet taskOverSheet = wb.createSheet("任务完成逾期统计");
                //设置单元格宽度
                taskOverSheet.setDefaultColumnWidth(30);
                Row onenrow = taskOverSheet.createRow(0);
                //创建单元格并设置单元格内容
                List<String> overCellTitles = Arrays.asList("任务状态", "数量", "比例");
                for (int i = 0; i < taskEchar.getStatus().size(); i++) {
                    if (i < overCellTitles.size()) {
                        onenrow.createCell(i).setCellValue(overCellTitles.get(i));
                        onenrow.getCell(i).setCellStyle(style);
                    }
                    Row row2 = taskOverSheet.createRow(taskEcharRowNum.get());
                    row2.createCell(0).setCellValue(taskEchar.getStatus().get(i));
                    row2.createCell(1).setCellValue(taskEchar.getTaskStatusCount().get(i));
                    row2.createCell(2).setCellValue(taskEchar.getTaskStatusRate().get(i) + "%");
                    row2.getCell(0).setCellStyle(style);
                    row2.getCell(1).setCellStyle(style);
                    row2.getCell(2).setCellStyle(style);
                    taskEcharRowNum.set(taskEcharRowNum.get() + 1);
                }

                AtomicReference<Integer> taskOverEcharRowNum = new AtomicReference<>(10);
                Row row = taskOverSheet.createRow(9);
                TaskEchar taskOverEchar = data.get(1);
                List<String> taskOverTitle = Arrays.asList("逾期状态", "数量", "比例");
                for (int i = 0; i < taskOverEchar.getStatus().size(); i++) {
                    if (i < taskOverTitle.size()) {
                        row.createCell(i).setCellValue(taskOverTitle.get(i));
                        row.getCell(i).setCellStyle(style);
                    }
                    Row row2 = taskOverSheet.createRow(taskOverEcharRowNum.get());
                    row2.createCell(0).setCellValue(taskOverEchar.getStatus().get(i));
                    row2.createCell(1).setCellValue(taskOverEchar.getTaskStatusCount().get(i));
                    row2.createCell(2).setCellValue(taskOverEchar.getTaskStatusRate().get(i) + "%");
                    row2.getCell(0).setCellStyle(style);
                    row2.getCell(1).setCellStyle(style);
                    row2.getCell(2).setCellStyle(style);
                    taskOverEcharRowNum.set(taskOverEcharRowNum.get() + 1);
                }
            }
            //输出Excel文件
            OutputStream out = null;
            filename = UUID.randomUUID() + "个人统计" + ".xlsx";
            out = new FileOutputStream(ExcelUtil.getAbsoluteFile(filename));
            wb.write(out);
            wb.close();
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
            return AjaxResult.error();
        }
        return AjaxResult.success(filename);
    }


    @Log(title = "用户管理", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    @ResponseBody
    public AjaxResult export(SysUser user) {
        List<SysUser> list = userService.selectUserList(user);
        ExcelUtil<SysUser> util = new ExcelUtil<SysUser>(SysUser.class);
        return util.exportExcel(list, "用户数据");
    }

    @Log(title = "用户管理", businessType = BusinessType.IMPORT)
    @RequiresPermissions("system:user:import")
    @PostMapping("/importData")
    @ResponseBody
    public AjaxResult importData(MultipartFile file, boolean updateSupport) throws Exception {
        ExcelUtil<SysUser> util = new ExcelUtil<SysUser>(SysUser.class);
        List<SysUser> userList = util.importExcel(file.getInputStream());
        String operName = ShiroUtils.getSysUser().getLoginName();
        String message = userService.importUser(userList, updateSupport, operName);
        return AjaxResult.success(message);
    }

    @RequiresPermissions("system:user:view")
    @GetMapping("/importTemplate")
    @ResponseBody
    public AjaxResult importTemplate() {
        ExcelUtil<SysUser> util = new ExcelUtil<SysUser>(SysUser.class);
        return util.importTemplateExcel("用户数据");
    }

    /**
     * 新增用户
     */
    @GetMapping("/add")
    @ResponseBody
    public ModelMap add() {
        ModelMap mmap = new ModelMap();
        mmap.put("roles", roleService.selectRoleAll());
        mmap.put("posts", postService.selectPostAll());
        return mmap;
    }

    /**
     * 新增保存用户
     */
    /* @RequiresPermissions("system:user:add")*/
    @Log(title = "用户管理:新增用户", businessType = BusinessType.INSERT)
    @PostMapping("/add")
    @ResponseBody
    public AjaxResult addSave(SysUser user, SysUserRole sysUserRole) {
        if (StringUtils.isNotNull(user.getUserId()) && SysUser.isAdmin(user.getUserId())) {
            return error("不允许修改超级管理员用户");
        }
        String uniqueFlag = userService.checkLoginNameUnique(user.getLoginName());
        if (UserConstants.USER_NAME_NOT_UNIQUE.equals(uniqueFlag)) {
            return error("登录账号不能相同");
        }
        user.setSalt(ShiroUtils.randomSalt());
        user.setPassword(passwordService.encryptPassword(user.getLoginName(), user.getPassword(), user.getSalt()));
        user.setCreateBy(ShiroUtils.getLoginName());
        //判断登录用户是否是管理员
        Long userId2 = ShiroUtils.getUserId();
        sysUserRole.setUserId(userId2);
        Integer roleId2 = sysRoleService.selectRoleId(sysUserRole);//登录用户id
        Long roleId1 = sysUserRole.getRoleId();
        if (roleId1 == null) {
            roleId1 = 0L;
        }
        //如果是超级管理员，则是可以添加任何的用户
        if (roleId2 == 2) {
            //添加用户
            userService.insertUser(user);
            //给用户添加角色
            sysUserRole.setUserId(user.getUserId());

            sysRoleService.insertUsers(sysUserRole);
        }
        //如果是管理员，则可以添加管理员和普通用户，普通用户不能添加用户
        if (roleId2 == 1) {
            if (roleId1 == 1 || roleId1 == 0) {
                //添加用户
                userService.insertUser(user);
                //给用户添加角色
                sysUserRole.setUserId(user.getUserId());

                sysRoleService.insertUsers(sysUserRole);
            }
        }
        //增加用户头像关联
        if (StringUtils.isNotNull(user.getFileId()) && StringUtils.isNotNull(user.getAvatar())) {
            SysFileInfo sysFileInfo = new SysFileInfo();
            sysFileInfo.setFileId(user.getFileId());
            sysFileInfo.setFileType(2);
            sysFileInfo.setWorkId(user.getUserId().intValue());
            sysFileInfoService.updateFileInfo(sysFileInfo);
        }
        MyUtils.removeMapCache("deptList");
        MyUtils.removeMapCache("userGroupSysDepts");
        return success();
    }

    /**
     * 修改用户
     */
    @GetMapping("/edit/{userId}")
    @ResponseBody
    public ModelMap edit(@PathVariable("userId") Long userId) {
        ModelMap mmap = new ModelMap();
        mmap.put("user", userService.selectUserById(userId));
        mmap.put("roles", roleService.selectRolesByUserId(userId));
        mmap.put("posts", postService.selectPostsByUserId(userId));
        return mmap;
    }

    /**
     * 修改保存用户
     */
    /*    @RequiresPermissions("system:user:edit")*/
    @Log(title = "用户管理:用户编辑", businessType = BusinessType.UPDATE)
    @PostMapping("/editsave")
    @ResponseBody
    public AjaxResult editSave(@RequestBody SysUser user) {
        Boolean upRole = false;
        MyUtils.removeMapCache("deptList");
        MyUtils.removeMapCache("userGroupSysDepts");
        user.setUpdateBy(ShiroUtils.getUserId() + "");
        if (StringUtils.isNotNull(user.getFileId()) && StringUtils.isNotNull(user.getAvatar())) {
            //删除用户头像关联
            Long[] userIds = Convert.toLongArray(user.getUserId().toString());
            sysFileInfoService.updateFileInfoByUserId(userIds);
            //新增用户头像关联
            SysFileInfo sysFileInfo = new SysFileInfo();
            sysFileInfo.setFileId(user.getFileId());
            sysFileInfo.setFileType(2);
            sysFileInfo.setWorkId(user.getUserId().intValue());
            sysFileInfoService.updateFileInfo(sysFileInfo);
            user.setUpdateBy(ShiroUtils.getUserId() + "");
            user.setUpdateTime(new Date());
            //修改用户信息
            int a = userService.updateUser(user);
            return AjaxResult.success();
        }
        //user.setUserId(115l);
        user.setUpdateBy(ShiroUtils.getUserId() + "");
        user.setUpdateTime(new Date());
        int a = userService.updateUser(user);
        //修改用户类型
        SysUserRole sysUserRole = new SysUserRole();
        //如果是管理员，可以直接修改角色
        Long roleId = user.getRoleId();//要修改的角色id
        SysUser sysUser = userService.selectUserById(user.getUserId());
        if (!sysUser.getRoleId().equals(user.getRoleId())) {
            upRole = true;
        }
        if (SysUser.isAdmin(ShiroUtils.getUserId())) {
            upRole = false;
            Long u = user.getUserId();//要修改的用户id
            if (roleId != null && u != null) {
                sysUserRole.setUserId(u);
                sysUserRole.setRoleId(roleId);
                a = sysRoleService.updateUsersRole(sysUserRole);
            }
        }
        Long userId1 = user.getUserId();
        if (userId1 == null) {
            userId1 = 0L;
        }
        sysUserRole.setUserId(userId1);
        Integer roleId1 = sysRoleService.selectRoleId(sysUserRole);//要修改的用户id
        Long userId2 = ShiroUtils.getUserId();
        sysUserRole.setUserId(userId2);
        Integer roleId2 = sysRoleService.selectRoleId(sysUserRole);//登录用户id
        //当登录用户不是超级管理员的情况
        if (!SysUser.isAdmin(userId2)) {
            if (roleId1 != null && roleId2 != null) {
                if (roleId2 == 1) {
                    if (roleId1 == 0) {
                        sysUserRole.setUserId(userId1);
                        sysUserRole.setRoleId(roleId);
                        a = sysRoleService.updateUsersRole(sysUserRole);
                    }
                    if (roleId1 == 1) {
                        return error("无权限修改管理员用户");
                    }
                }
                if (roleId2 == 0) {
                    return error("无权限修改管理员用户");
                }
            }
        }
        //用于给日志传参
        String info = ShiroUtils.getSysUser().getUserName() + " 修改了 " + user.getUserName() + " 的用户信息";
        MyUtils.putMapCache(ShiroUtils.getUserId() + "operLogInfo", user);
        if (upRole) {
            return AjaxResult.success("无权限修改管理员用户");
        }
        return toAjax(a);
    }

    /**
     * 修改用户的角色接口
     *
     * @return
     */
    @PostMapping("/updateUserRole")
    @ResponseBody
    @Transactional
    public AjaxResult updateUsersRole(SysUserRole sysUserRole) {
        int a = 0;
        if (SysUser.isAdmin(ShiroUtils.getUserId())) {
            a = sysRoleService.updateUsersRole(sysUserRole);
        }

        long userId1 = sysUserRole.getUserId();
        sysUserRole.setUserId(userId1);
        Integer roleId1 = sysRoleService.selectRoleId(sysUserRole);//要修改的用户id

        long userId2 = ShiroUtils.getUserId();
        sysUserRole.setUserId(userId2);
        Integer roleId2 = sysRoleService.selectRoleId(sysUserRole);//登录用户id
        if (roleId2 == 1) {
            if (roleId1 == 0) {
                a = sysRoleService.updateUsersRole(sysUserRole);
            }
        }
        return toAjax(a);
    }


    @RequiresPermissions("system:user:resetPwd")
    @Log(title = "用户管理:重置密码", businessType = BusinessType.UPDATE)
    @GetMapping("/resetPwd/{userId}")
    public String resetPwd(@PathVariable("userId") Long userId, ModelMap mmap) {
        mmap.put("user", userService.selectUserById(userId));
        return prefix + "/resetPwd";
    }

    @RequiresPermissions("system:user:resetPwd")
    @Log(title = "用户管理:重置密码", businessType = BusinessType.UPDATE)
    @PostMapping("/resetPwdSave")
    @ResponseBody
    public AjaxResult resetPwdSave(SysUser user) {
        SysUser sysUser = userService.selectUserById(user.getUserId());
        String passWord = userService.selectAllInitPassWordById(user);
        user.setSalt(ShiroUtils.randomSalt());
        if (!MyUtils.isEmpty(passWord)) {
            user.setPassword(passWord);
        } else {
            user.setPassword("123456");
        }
        user.setPassword(passwordService.encryptPassword(sysUser.getLoginName(), user.getPassword(), user.getSalt()));
        return toAjax(userService.resetUserPwd(user));
    }

    @Log(title = "用户管理:修改密码", businessType = BusinessType.UPDATE)
    @PostMapping("/modifyPwdSave")
    @ResponseBody
    public AjaxResult modifyPwdSave(SysUser user) {
        SysUser sysUser = userService.selectUserById(user.getUserId());
        String password = passwordService.encryptPassword(sysUser.getLoginName(), user.getPassword(), sysUser.getSalt());
        if (sysUser.getPassword().equals(password)) {
            System.out.println("密码正确");
            //修改密码
            user.setSalt(ShiroUtils.randomSalt());
            user.setPassword(passwordService.encryptPassword(sysUser.getLoginName(), user.getNewPassword(), user.getSalt()));
            userTokenService.deleteTokenByUserId(ShiroUtils.getUserId());
            return toAjax(userService.resetUserPwd(user));
        } else {
            System.out.println("密码错误");
            return AjaxResult.error("原密码错误");
        }

    }


    /*@RequiresPermissions("system:user:remove")*/
    @Log(title = "用户管理:删除用户", businessType = BusinessType.DELETE)
    @PostMapping("/remove")
    @ResponseBody
    public AjaxResult remove(String ids) {
        MyUtils.removeMapCache("deptList");
        MyUtils.removeMapCache("userGroupSysDepts");
        try {
            Long[] userIds = Convert.toLongArray(ids);
            for (Long userId : userIds) {
                if (SysUser.isAdmin(userId)) {
                    throw new BusinessException("不允许删除超级管理员用户");
                }
            }
            sysFileInfoService.updateFileInfoByUserId(userIds);
            int a = userService.deleteUserByIds(ids);
            SysUserRole sysUserRole = new SysUserRole();
            //删除角色表中的用户
            for (int i = 0; i < userIds.length; i++) {
                sysUserRole.setUserId(userIds[i]);
                sysRoleService.deleteUserRole(sysUserRole);
            }
            return toAjax(a);
        } catch (Exception e) {
            return error(e.getMessage());
        }
    }

    /**
     * 校验用户名
     */
    @PostMapping("/checkLoginNameUnique")
    @ResponseBody
    public String checkLoginNameUnique(SysUser user) {
        return userService.checkLoginNameUnique(user.getLoginName());
    }

    /**
     * 校验手机号码
     */
    @PostMapping("/checkPhoneUnique")
    @ResponseBody
    public String checkPhoneUnique(SysUser user) {
        return userService.checkPhoneUnique(user);
    }

    /**
     * 校验email邮箱
     */
    @PostMapping("/checkEmailUnique")
    @ResponseBody
    public String checkEmailUnique(SysUser user) {
        return userService.checkEmailUnique(user);
    }

    /**
     * 用户状态修改
     */
    @Log(title = "用户管理", businessType = BusinessType.UPDATE)
    @RequiresPermissions("system:user:edit")
    @PostMapping("/changeStatus")
    @ResponseBody
    public AjaxResult changeStatus(SysUser user) {
        return toAjax(userService.changeStatus(user));
    }

    //用户名或者手机号模糊查询用户名字
    @PostMapping("/selectUsers")
    @ResponseBody
    public List<SysUser> selectUsers(SysUser sysUser) {

        //SysUser[] sysUsers = null;
        //获得假期的list
        List<SysHolidays> holidaysList = holidaysService.selectSysHolidaysList(null);//假期类，即国家法定节假日
        List<String> list = new ArrayList<>();
        for (SysHolidays holidays : holidaysList) {
            list.add(holidays.getHolidays());//holidays是一个字符串对象
        }
        /*Integer a[] = sysUser.getIds();
        //Integer[] a = {119, 117};
        sysUsers = new SysUser[a.length];
        if (a != null & a.length > 0) {
            for (int i = 0; i < a.length; i++) {
                sysUser.setUserId(a[i].longValue());
                sysUsers[i] = userService.selectUserByUserId(sysUser);
            }
        }*/
        String userName = sysUser.getUserName();
        sysUser.setUserName(userName);
        List<SysUser> users = userService.selectUserList(sysUser);

        if (users != null & !users.isEmpty()) {
            for (int j = 0; j < users.size(); j++) {
                Integer userId = users.get(j).getUserId().intValue();
                if (userId == null) {
                    userId = 0;
                }
                List<Integer> p = saturation(userId, list);
                //遍历map,且显示在页面上
                for (int x = 0; x < p.size(); x++) {
                    Integer workDays = p.get(0);
                    Integer period = p.get(1);
                    Integer creatTaskNum = p.get(2);
                    if (workDays != null | period != null | creatTaskNum != null) {
                        double avg = (float) period / (float) workDays;
                        String str = String.format("%.4f", avg);
                        double saturation = Double.valueOf(str.toString());
                        users.get(j).setWorkDays(workDays);
                        users.get(j).setPeriod(period + "");
                        users.get(j).setCreatTaskNum(creatTaskNum);
                        users.get(j).setSaturation(saturation);
                    }
                }
            }
        }
        return users;
    }


    /*@PostMapping("/taskUser")
     @ResponseBody*/
    public List<Integer> saturation(int userId, List<String> list) {
        //int userId=119;
        TaskTable taskTable = new TaskTable();
        TaskUser taskUser = new TaskUser();//任务参与人对象
        AuditFlowCurrent auditFlowCurrent = new AuditFlowCurrent();
        TaskTable[] taskTableList = null;
        List<Integer> list1 = new ArrayList<>();
        int creatTaskNum = 0;
        taskTable.setStartTime(DateUtils.parseDate(DateUtils.getfirstday()));
        taskTable.setEndTime(DateUtils.parseDate(DateUtils.getlastday()));
        taskTable.setStartTimes(1L);//临时的时间对象
        taskTable.setEndTimes(1L);

        taskTable.setChargepeopleId((long) userId);//登录用户id
        List<TaskTable> taskTableList1 = taskTableService.selectListByChargeId(taskTable);//获取用户作为负责人
        taskUser.setUserId((long) userId);
        List<TaskUser> listTid1 = taskUserService.selectAllTid(taskUser);//获取用户作为参与人

        for (int i = 0; i < taskTableList1.size(); i++) {
            list1.add(taskTableList1.get(i).gettId().intValue());
        }
        for (int i = 0; i < listTid1.size(); i++) {
            Integer tId = listTid1.get(i).gettId().intValue();
            taskTable.settId(tId.longValue());
            String finishFlag = taskTableService.selectFinishFlagById(taskTable);
            if (finishFlag != null) {
                if ((Integer.parseInt(finishFlag) > -1) && (Integer.parseInt(finishFlag) != 2)) {
                    list1.add(tId);
                }
            }
        }
        taskTableList = new TaskTable[list1.size()];
        for (int i = 0; i < list1.size(); i++) {
            taskTable.settId(list1.get(i).longValue());
            taskTableList[i] = taskTableService.selectTaskByTid1(taskTable);
        }
        int period = 0;
        int p = 0;
        TaskTable[] taskList = removeArrayEmptyTextBackNewArray(taskTableList);
        for (TaskTable taskTable1 : taskList) {
            taskTable.settId(taskTable1.gettId());
            //String createBy = taskTableService.selectCreateId(taskTable);//任务发起人
            List<TaskTable> list3 = taskTableService.selectTaskByTid2(taskTable);
            String startTime = DateUtils.getfirstday(), endTime = DateUtils.getlastday();
            //如果结束时间小于等于开始时间，
            if (DateUtils.getTimelong(DateUtils.dateToString(taskTable1.getEndTime())) <= DateUtils.getTimelong(DateUtils.getlastday())) {
                endTime = DateUtils.dateToString(taskTable1.getEndTime());
            }
            if (DateUtils.getTimelong(DateUtils.dateToString(taskTable1.getStartTime())) >= DateUtils.getTimelong(DateUtils.getfirstday())) {
                startTime = DateUtils.dateToString(taskTable1.getStartTime());
            }
            try {
                //去除周末节假日工作小时,上班时间到下班时间，传入一个节假日的list,除以每天工作多少小时
                period += (int) (CalculateHours.calculateHour(startTime + " 8:00:00", endTime + " 17:30:00", list) / 7.5);

            } catch (ParseException e) {
                e.printStackTrace();
            }
        }
        int workday = 0;
        try {
            workday = (int) (CalculateHours.calculateHour(DateUtils.getfirstday() + " 8:00:00", DateUtils.getlastday() + " 17:30:00", list) / 7.5);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        taskTable.setCreateBy(userId + "");
        List<TaskTable> createByList = taskTableService.selectCreateBy(taskTable);
        for (int i = 0; i < createByList.size(); i++) {
            auditFlowCurrent.setApplyId(createByList.get(i).gettId().intValue());
            Integer currentState = auditFlowCurrentService.selectCurrentState(auditFlowCurrent);
            if (currentState == null) {
                currentState = 0;
            }
            if (currentState != 3) {
                if (DateUtils.getTimelong(DateUtils.dateToString(createByList.get(i).getStartTime())) >= DateUtils.getTimelong(DateUtils.getfirstday())) {
                    if (DateUtils.getTimelong(DateUtils.dateToString(createByList.get(i).getStartTime())) <= DateUtils.getTimelong(DateUtils.getlastday())) {
                        creatTaskNum++;
                    }
                }
            }
        }
        List<Integer> listResult = new ArrayList<>();
        listResult.add(workday);
        listResult.add(period);
        listResult.add(creatTaskNum);

        return listResult;
    }

    private static TaskTable[] removeArrayEmptyTextBackNewArray(TaskTable[] strArray) {
        List<TaskTable> strList = Arrays.asList(strArray);
        List<TaskTable> strListNew = new ArrayList<>();
        for (int i = 0; i < strList.size(); i++) {
            if (ShiroUtils.isNotEmpty(strList)) {
                strListNew.add(strList.get(i));
            }
        }
        TaskTable[] strNewArray = strListNew.toArray(new TaskTable[strListNew.size()]);
        return strNewArray;
    }


    @ApiOperation("获取部门的所有产品经理")
    @PostMapping("/selectManagerId")
    @ResponseBody
    public List<SysUser> selectmanagerId(SysUser sysUser) {
        sysUser.setPostId(9L);
        return userService.selectmanagerId(sysUser);
    }

}